|                          \
b  |                           \
|____________________________\")
cat("          a
--------------------------
|                          \
b  |                           \
|____________________________\")
cat("          a
--------------------------
|                          \
b  |                           \
|____________________________\")
cat("dlsjflskdjfj
lsdjflkjsdf")
cat(""          a
--------------------------
|                          \
b  |                           \
|____________________________\"")
cat(          a
--------------------------
|                          \
b  |                           \
|____________________________\")
cat("          a
--------------------------
|                          \
b   |                           \
|____________________________\")
cat("          a
--------------------------
|                          \
b   |                           \
|____________________________\ ")
cat("          a
--------------------------
|                          /\
b   |                           \
|____________________________\ ")
cat("          a
--------------------------
|                          "\"
b   |                           \
|____________________________\ ")
cat("          a
--------------------------
|                         |
b   |                         |
|_________________________| ")
area_cal <- function(){
cat("          a
--------------------------
|                         |
b   |                         |
|_________________________| ")
a <- readline(prompt="Enter the value for a: ")
b <- readline(prompt="Enter the value for b: ")
area <- a *b
return(area)
}
area_cal <- function(){
cat("          a
--------------------------
|                         |
b   |                         |
|_________________________| ")
a <- readline(prompt="Enter the value for a: ")
b <- readline(prompt="Enter the value for b: ")
area <- as.integer(a) * as.integer(b)
return(area)
}
area_cal()
area_cal <- function(){
cat("          a
--------------------------
|                         |
b   |                         |
|_________________________| ")
a <- readline(prompt="Enter the value for a: ")
b <- readline(prompt="Enter the value for b: ")
area <- as.integer(a) * as.integer(b)
return(paste("The area of the rectangle is", area))
}
area_cal()
cel_to_far <- function(c){
f <- c * (9/5) + 32
return(f)
}
cel_to_far(70)
formals(read.csv)
degree <- function(x, standard){
if (standard=="celsius""){
d <- x * (9/5) + 32
} else if (standard=="fahrenheit") {
d <- (x - 32) * (5/9)
} else{
print("Please enter a correct standard")
}
return(d)
}
degree <- function(x, standard){
if (standard=="celsius"){
d <- x * (9/5) + 32
} else if (standard=="fahrenheit") {
d <- (x - 32) * (5/9)
} else {
print("Please enter a correct standard")
}
return(d)
}
convertdegree <- function(x, standard){
if (standard=="celsius"){
d <- x * (9/5) + 32
} else if (standard=="fahrenheit") {
d <- (x - 32) * (5/9)
} else {
print("Please enter a correct standard")
}
return(d)
}
convertdegree(10, "Celsius")
convertdegree(10, "celsius")
convertdegree(10, "fahrenheit")
?devtools
?functions
type(x)
x <- 2
class(x)
type(x)
x <- "2L"
class(x)
names(airquality)
median(airquality$Ozone)
head(airquality)
median(airquality$Wind)
?airquality
table(airquality$Day)
View(airquality)
min(iris$Sepal.Length)
min(iris$Sepal.Width)
max(iris$Sepal.Width)
head(iris)
iris %>% filter(Species="setosa", Petal.Width<=1.5)
library(dplyr)
iris %>% filter(Species="setosa", Petal.Width<=1.5)
iris %>% filter(Species=="setosa", Petal.Width<=1.5)
iris %>% filter(Species=="setosa", Petal.Width<=1.5)  %>% dim
iris$Petal.Width>5
sum(iris$Petal.Width>5)/dim(iris)
summary(iris$Petal.Width)
sum(iris$Petal.Width>2)/dim(iris)
sum(iris$Petal.Width>2)/nrow(iris)
li <- list(a = 1:3, c("dd", "aa", "cc"))
li
simple_calc <- function(x, y){
a <- x + y
d <- a^2
return(d)
}
simple_calc(3,5)
simple_calc(1,3)
version(ggplot2)
version('ggplot2')
version
sessionInfo()
SessionInfo()
ff(531)
var <- "apple"
class(var)
fruits <- c("apple", "banana", "orange")
fruits
class(fruits)
?c
heights <-  <- c(60, 65, 80, 95)
heights <-  c(60, 65, 80, 95)
class(heights)
1 < 10
1 > 10
colors <- factor(c("blue", "red", "orange", "orange", "green", "green", "red"))
colors <- factor("blue", "red", "orange", "orange", "green", "green", "red")
dim(iris)
?length
colnames(iris)
rownames(iris)
head(iris)
rownames(mtcars)
iris_rows <- rownames(iris)
iris_rows[15]
summary(iris$Sepal.Width)
unique(iris$Species)
fruits <- c("apple", "banana", "tomato")
vegetables <- c("carrots", "lettuce", "cucumber")
food <- c("apple", "banana", "tomato", "carrots", "lettuce", "cucumber", "rice", "milk", "eggs")
any(fruits %in% foods)
fruits <- c("apple", "banana", "tomato")
vegetables <- c("carrots", "lettuce", "cucumber")
foods <- c("apple", "banana", "tomato", "carrots", "lettuce", "cucumber", "rice", "milk", "eggs")
any(fruits %in% foods)
all(vegetables %in% fruits)
all(foods %in% vegetables )
all(foods %in% fruits)
all(fruits %in% vegetables)
ff(561)
toys <- list(c("bear","ball,"puzzle"), c("fabric", "rubber", "wood"))
list(c(4,20,3), c("bear", "giraffe"))
toys <- list(c("bear","ball","puzzle"), c("fabric", "rubber", "wood"))
toys
toys <- list(c("bear","ball","puzzle"), c("fabric", "rubber", "wood"))
children <- list(c("Kareem","Liz","Paola"), c(2,3,2))
children = list(c("Kareem","Liz","Paola"), c(2,3,2))
toys[2]
toys[[2]]
toys[1][3]
toys[[1]][3]
toys[[1]][[3]]
names(toys)
names(toys) <- c("name", "material")
toys
class(mtcars)
names(mtcars)
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_dsjob"
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
View(out$course_summary)
out$images[11]
out <- create_images(out, extra.opts = "-density 400 -quality 200")
out$images[2]
out <- check_course(course_dir)
a <- basename(out$images[2])
a <- basename(out$images[[2]])
b <- list.files("manuscript/resources/images/01_rstudio_cloud_tour/")
a %in% b
a[20]
out <- check_course(course_dir)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
aws.signature::use_credentials(profile="polly")
out <- create_videos(out)
out <- vids_to_youtube(out, course_title = Course)
out <- update_youtube_link(out)
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
youtube_uploads <- youtube_uploads[1:24,]
youtube_uploads <- youtube_uploads[c(1:19,24),]
saveRDS(youtube_uploads,file = file.path(paths$met_path,"youtube_uploads.rds"))
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
out <- check_course(course_dir)
View(out$course_summary)
out <- update_youtube_link(out)
out <- check_course(course_dir)
View(out$course_summary)
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
aws.signature::use_credentials(profile="polly")
out <- create_videos(out)
out <- vids_to_youtube(out, course_title = Course)
getwd()
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
View(out$course_summary)
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
aws.signature::use_credentials(profile="polly")
out <- create_videos(out)
out <- vids_to_youtube(out, course_title = Course)
View(out$course_summary)
out <- update_youtube_link(out)
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
View(out$course_summary)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
aws.signature::use_credentials(profile="polly")
out <- create_videos(out)
out <- vids_to_youtube(out, course_title = Course)
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
youtube_uploads <- youtube_uploads[1:21,]
save(youtube_uploads, file.path(paths$met_path,"youtube_uploads.rds"))
paths
getwd()
saveRDS(youtube_uploads, file.path(paths$met_path,"youtube_uploads.rds"))
out <- check_course(course_dir)
out <- update_youtube_link(out)
youtube_uploads <- readRDS(file.path(paths$met_path,"youtube_uploads.rds"))
View(youtube_uploads)
out <- check_course(course_dir)
View(youtube_uploads)
course_dir="/Users/shannonellis/Desktop/jhudsl_CDS/cds_R"
Course = "Introduction to R"
library(didactr)
paths <- check_structure(course_dir)
out <- check_course(course_dir)
out <- create_images(out, extra.opts = "-density 400 -quality 200")
aws.signature::use_credentials(profile="polly")
out <- create_videos(out, subtitles=TRUE)
out$images[2]
out$images[11]
out <- vids_to_youtube(out, course_title = Course)
out <- update_youtube_link(out)
library(readr)
?read_csv
library(tidyverse)
library(nycflights13)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
View()
install.packages("nycflights13")
library(nycflights13)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
View()
library(tidyverse)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
View()
?rank
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE))
summary(df$q3)
hist(df$q3)
>flights
?flights
summary(flights$dep_delay)
hist(flights$dep_delay)
dim(flights)
dim(df)
summary(df$q3)
hist(df$q3)
rank(desc(df4q3)
rank(desc(df$q3)
)
?rank
summary(df$rank)
dim(df)
hist(df$rank)
table(df$top_2)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
arrange(top_2) %>%
View()
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
arrange(rank) %>%
View()
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin)
df
flights
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T),
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE))
df
quantile(df$dep_delay[1])
df$q3[1]
quantile(df$dep_delay[1], probs=0.75)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
mutate(q3 = quantile(dep_delay, probs = 0.75, na.rm = T))
quantile(df$dep_delay[1], probs=0.75)
df$q3[1]
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE))
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
arrange(rank) %>%
View()
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T))
df
hist(df$q3)
summary(df$q3)
df <- flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
arrange(rank)
df$rank %>% summary()
hist(df$rank)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
rank = rank(desc(q3)),
top_2 = ifelse(rank %in% c(1,2), TRUE, FALSE)) %>%
arrange(rank) %>%
View()
summary(df$q3)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
#rank = rank(desc(q3)),
top_2 = top_n(q3,2)) %>%
# arrange(rank) %>%
View()
?top_n
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
#rank = rank(desc(q3)),
top_2 = top_n(2, q3)) %>%
# arrange(rank) %>%
View()
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
#rank = rank(desc(q3)),
top_2 = top_n(.,2, q3)) %>%
# arrange(rank) %>%
View()
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
mutate(
#rank = rank(desc(q3)),
top2 = top_n(.,2, q3)) %>%
# arrange(rank) %>%
View()
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T))
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
arrange(q3)
flights %>%
filter(sched_dep_time <= 1200) %>%
group_by(carrier, origin) %>%
summarize(q3 = quantile(dep_delay, probs = 0.75, na.rm = T)) %>%
arrange(desc(q3))
